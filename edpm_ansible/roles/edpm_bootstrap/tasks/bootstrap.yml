---
# Copyright 2019 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# "edpm_bootstrap" will search for and load any operating system variable file

- name: Ensure /var/log/journal exists
  become: true
  file:
    path: /var/log/journal
    state: directory
    mode: 0750
    owner: root
    group: root
    setype: var_log_t

- name: Check cloud-init status
  shell: systemctl is-active cloud-init.service || systemctl is-enabled cloud-init.service
  failed_when: false
  become: true
  register: cloud_init_enabled

- debug:
    var: cloud_init_enabled

- name: Check if cloud-init is disabled via kernel args
  shell: cat /proc/cmdline | grep -q cloud-init=disabled
  failed_when: false
  check_mode: false
  register: cloud_init_vendor_disabled

- name: Wait for cloud-init to finish, if enabled
  community.general.cloud_init_data_facts:
    filter: status
  register: res
  until: >
    res.cloud_init_data_facts.status.v1.stage is defined and
    not res.cloud_init_data_facts.status.v1.stage
  retries: 50
  delay: 5
  when:
    - not ansible_check_mode
    - cloud_init_enabled.rc is defined
    - cloud_init_enabled.rc == 0
    - cloud_init_vendor_disabled.rc is not defined or cloud_init_vendor_disabled.rc != 0

# found within the "vars/" path. If no OS files are found the task will skip.
- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - skip: true
      files:
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_version'].split('.')[0] }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}.yml"
  tags:
    - always

# Currently only supported on RHEL as edpm does not have a version package
- name: Release version package
  when:
    - (ansible_facts['distribution'] | lower) == 'redhat'
    - (edpm_bootstrap_release_version_package |list | length) > 0
  block:
    - name: Check release version package is installed
      ansible.builtin.command: "rpm -q --whatprovides {{ edpm_bootstrap_release_version_package | join(' ') }}"
      register: rpm_query_result
      failed_when: false
    - name: Deploy release version package
      become: true
      ansible.builtin.package:
        name: "{{ edpm_bootstrap_release_version_package }}"
        state: present
      when:
        - rpm_query_result.rc > 0

- name: Import packages tasks
  ansible.builtin.import_tasks: packages.yml

- name: Set selinux state
  become: true
  selinux:
    policy: targeted
    state: "{{ edpm_bootstrap_selinux_mode }}"

- name: Enable openvswitch service if installed
  become: true
  ansible.builtin.service:
    name: openvswitch
    enabled: true
    state: started
  register: openvswitch_service_start
  failed_when:
    - not 'Could not find the requested service' in openvswitch_service_start.msg|default('')
    - openvswitch_service_start is failed

- name: Deploy and enable network service
  become: true
  when:
    - (edpm_bootstrap_legacy_network_packages | length) > 0
  block:
    - name: Check required legacy network packages for bootstrap EDPM is installed
      ansible.builtin.command: "rpm -q --whatprovides {{ edpm_bootstrap_legacy_network_packages | join(' ') }}"
      register: rpm_query_result
      failed_when: false

    - name: Deploy network-scripts required for deprecated network service
      ansible.builtin.package:
        name: "{{ edpm_bootstrap_legacy_network_packages }}"
        state: present
      when:
        - rpm_query_result.rc > 0

    - name: Ensure network service is enabled
      ansible.builtin.systemd:
        name: "{{ edpm_bootstrap_network_service }}"
        enabled: true

- name: Stop NetworkManager from updating resolv.conf
  become: true
  when: edpm_bootstrap_network_service == 'NetworkManager'
  block:
    - name: Set 'dns=none' in /etc/NetworkManager/NetworkManager.conf
      community.general.ini_file:
        path: /etc/NetworkManager/NetworkManager.conf
        state: present
        no_extra_spaces: true
        section: main
        option: dns
        value: none
        backup: true
        mode: 0644
    - name: Set 'rc-manager=unmanaged' in /etc/NetworkManager/NetworkManager.conf
      community.general.ini_file:
        path: /etc/NetworkManager/NetworkManager.conf
        state: present
        no_extra_spaces: true
        section: main
        option: rc-manager
        value: unmanaged
        backup: true
        mode: 0644
    - name: Reload NetworkManager
      ansible.builtin.service:
        name: NetworkManager
        state: reloaded
