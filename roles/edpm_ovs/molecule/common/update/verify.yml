- name: Verify OVS update
  become: true
  hosts: all
  vars:
    scenario_name: "{{molecule_yml['scenario']['name']}}"
  pre_tasks:
    - name: Importing test_vars
      ansible.builtin.include_vars:
        file: "../test_vars.yml"
  tasks:
    - name: Ensure openvswitch systemd services are in expected states
      ansible.builtin.include_tasks: ../../../../../molecule/test-helpers/verify_systemd_unit.yaml
      loop:
        # "osp_service": false, disable check for unit files in /etc/systemd/system
        # OVS systemd unit files are located in /usr/lib/systemd/system
        - {"name": "openvswitch.service",
            "osp_service": false,
            "enabled": "enabled",
            "active":  ["active"]}
        - {"name": "ovs-vswitchd.service",
            "osp_service": false,
            "enabled": "static",
            "active":  ["active"]}
        - {"name": "ovsdb-server.service",
            "osp_service": false,
            "enabled": "static",
            "active": ["active"]}

    - name: Verify OpenFlows
      block:
        - name: Read stored OpenFlows
          ansible.builtin.slurp:
            src: "{{working_directory}}/{{ovs_flows_file}}"
          register: ovs_flows_before_update

        - name: Dump OpenFlows after the update
          ansible.builtin.shell: |
            ovs-ofctl dump-flows --no-stats --sort "{{test_bridge}}"
          register: ovs_flows_after_update
          failed_when: ovs_flows_after_update.rc != 0

        - name: Assert openvswitch flows remained unchanged after the update
          ansible.builtin.assert:
            that: ovs_flows_before_update.content | b64decode | split('\n') | select() ==
                  ovs_flows_after_update.stdout_lines

    - name: Verify Openvswitch pids
      block:
        - name: Read stored openvswitch service pids
          ansible.builtin.slurp:
            src: "{{working_directory}}/{{ovs_pid_file}}"
          register: pids_before_update

        - name: Collect openvswitch service pids after update
          ansible.builtin.shell:
            pgrep "ovs(db-server|-vswitch)"
          register: pids_after_update

        - name: Assert openvswitch reloaded services
          ansible.builtin.assert:
            that: pids_before_update.content | b64decode | split('\n') | sort() !=
                  pids_after_update.stdout_lines | sort()
          when: scenario_name == "update_with_reload"

        - name: Assert openvswitch did not reload services
          ansible.builtin.assert:
            that: pids_before_update.content | b64decode | split('\n') | sort() ==
                  pids_after_update.stdout_lines | sort()
          when: scenario_name in ("update_without_reload", "update_no_op", "update_when_pinned_version_already_present")
