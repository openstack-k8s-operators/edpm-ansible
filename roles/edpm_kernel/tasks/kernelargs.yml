---
# Copyright 2019 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Get the command line args of the node
  ansible.builtin.command: cat /proc/cmdline
  register: cmdline

- name: TSX KernelArgs compute node reboot prevention
  when:
    - '"nova_libvirt" in groups'
  block:
    - name: Check if node has a nova.conf
      ansible.builtin.stat:
        path: "{{ edpm_nova_compute_config_dir }}/etc/nova/nova.conf"
      register: nova_conf_check

    - name: Enabling defer_reboot when TSX was added or appended
      when:
        - nova_conf_check.stat.exists
        - edpm_kernel_args is regex("^[\s]*tsx=[\S]+[\s]*$")
      block:
        - name: Warn operator about workload protection
          ansible.builtin.debug:
            msg: |
              Automated reboot for this node has been defered because it is already provisionned.
              Please schedule a manual reboot after this deployment is completed.

        - name: Setting workload protection fact
          ansible.builtin.set_fact:
            _workload_protection: true

- name: EDPM Hugepages configuration
  vars:
    _converted_hugepages: {}
    _nonconfig_hugepages: {}
    _hugepages_modification: false
  when: edpm_kernel_hugepages | length
  block:
    - name: Rewrite edpm_kernel_hugepages to use integers as keys
      ansible.builtin.set_fact:
        _edpm_kernel_hugepages: "{{ _edpm_kernel_hugepages | default({}) | combine({hp.key | int: hp.value}) }}"
      loop: "{{ edpm_kernel_hugepages | dict2items }}"
      loop_control:
        loop_var: hp

    - name: Parsing running hugepage configuration from /proc/cmdline
      when: >
        "default_hugepagesz" in cmdline.stdout
      ansible.builtin.import_tasks: hugepages_parsing.yaml
      vars:
        cmdline_text: "{{ cmdline.stdout }}"

    - name: Validating hugepage config from /proc/cmdline against EDPM parameter
      ansible.builtin.import_tasks: hugepages_validations.yaml

    - name: Rewrite kernel args
      when: _hugepages_modification
      block:
        - name: Warn about possible modifications
          ansible.builtin.debug:
            msg: |
              EDPM hugepage modification differs from how the host is actually having.
              Current default pagesize: {{ _configured_default_size | default("None configured") }}
              EDPM default pagesize: {{ _edpm_default_hugepages }}
              Desired default pagesize: {{ _desired_default_hugepages }}

              From EDPM Hugepages configuration:
              {% for pagesize, config in _edpm_kernel_hugepages.items() %}
              - {{ pagesize }}
                expected: {{ config.count }} pages
                default: {{ config.default | default(false) }}
                current: {{ _converted_hugepages.get(pagesize | int, 0) }}
              {% endfor %}
              {% if _nonconfig_hugepages | length %}
              There's also some hugepages on the host that are not part of the EDPM configuration
              {% for pagesize, config in _nonconfig_hugepages.items() %}
              - {{ pagesize }}: {{ config }} pages
              {% endfor %}
              {% endif %}

        - name: Remove hugepage settings from kernelargs
          ansible.builtin.set_fact:
            _kernel_args: >-
              {{ edpm_kernel_args | regex_replace('[\s]*(default_)*hugepages[z]*=[\S]+[\s]*', ' ') }}
              default_hugepagesz={{ _desired_default_hugepages }}
              {% for hp, values in _edpm_kernel_hugepages.items() -%}
              hugepagesz={{ hp }} hugepages={{ values.count }}
              {% endfor -%}
              {% if not edpm_kernel_hugepages_remove | bool -%}
              {% for hp, values in _nonconfig_hugepages.items() -%}
              hugepagesz={{ hp }} hugepages={{ values }}
              {% endfor -%}
              {% endif -%}

        - name: Cleaning up whitespaces
          ansible.builtin.set_fact:
            edpm_kernel_args: >-
              {{ _kernel_args |
                 regex_replace('[\s]+default_hugepagesz=', ' default_hugepagesz=') |
                 regex_replace('[\s]+', ' ') |
                 regex_replace('[\s]+$', '')
              }}

- name: Check if the kernelargs entry is already present in the file
  ansible.builtin.replace:
    regexp: EDPM_KERNEL_ARGS
    dest: /etc/default/grub
    replace: ''
  check_mode: true
  register: grub_file_entry_check

# Kernel Args Configuration
- name: Kernel args configuration
  become: true
  when:
    - cmdline.stdout_lines is defined
    - edpm_kernel_args|string
    - edpm_kernel_args not in cmdline.stdout
  block:
    # Leapp does not recognise grun entries starting other than GRUB
    # It results wrong formatting of entries in file /etc/default/grub
    # In order to fix it for FFU (queens to train), EDPM_KERNEL_ARGS has been renamed
    # Ensure the fresh deployment is also alinged with the same name
    - name: Delete older name EDPM_KERNEL_ARGS entries if present
      ansible.builtin.lineinfile:
        dest: /etc/default/grub
        regexp: 'EDPM_KERNEL_ARGS'
        state: absent
    - name: Ensure the kernel args ( {{ edpm_kernel_args }} ) is present as GRUB_EDPM_KERNEL_ARGS
      ansible.builtin.lineinfile:
        dest: /etc/default/grub
        regexp: '^GRUB_EDPM_KERNEL_ARGS.*'
        insertafter: '^GRUB_CMDLINE_LINUX.*'
        line: 'GRUB_EDPM_KERNEL_ARGS=" {{ edpm_kernel_args }} "'
    - name: Add GRUB_EDPM_KERNEL_ARGS to the GRUB_CMDLINE_LINUX parameter
      ansible.builtin.lineinfile:
        dest: /etc/default/grub
        line: 'GRUB_CMDLINE_LINUX="${GRUB_CMDLINE_LINUX:+$GRUB_CMDLINE_LINUX }${GRUB_EDPM_KERNEL_ARGS}"'
        insertafter: '^GRUB_EDPM_KERNEL_ARGS.*'
    - name: Check grub config paths
      ansible.builtin.stat:
        path: "{{ item }}"
      register: grub_stat
      loop:
        - /boot/efi/EFI/BOOT
        - /boot/efi/EFI/redhat
        - /boot/efi/EFI/centos
        - /boot/efi/EFI/fedora
    - name: Generate grub config
      ansible.builtin.command: "grub2-mkconfig -o /boot/grub2/grub.cfg"

    - name: Generate EFI grub config
      ansible.builtin.command: "grub2-mkconfig -o {{ item.stat.path }}/grub.cfg"
      when: item.stat.exists|bool
      loop: "{{ grub_stat.results }}"

    - name: Copy grubenv to EFI directory
      ansible.builtin.copy:
        remote_src: true
        src: /boot/grub2/grubenv
        dest: "{{ item.stat.path }}/grubenv"
        mode: 0644
      when: item.stat.exists|bool
      loop: "{{ grub_stat.results }}"

    - name: Check for active tuned profile
      ansible.builtin.stat:
        path: "/etc/tuned/active_profile"
      register: tuned_active_profile

    - name: Ensure $tuned_params is restored to /boot/loader/entries files
      ansible.builtin.shell: >-
        tuned-adm profile $(cat /etc/tuned/active_profile)
      environment:
        PATH: "/bin:/usr/bin:/sbin:/usr/sbin"
      when:
        - tuned_active_profile.stat.exists
        - tuned_active_profile.stat.size | int > 0

    - name: Set reboot required fact
      ansible.builtin.set_fact:
        reboot_required: true

# Kernel modules loading
- name: Load type1 IOMMU driver for VFIO on boot
  ansible.builtin.import_role:
    name: osp.edpm.edpm_module_load
  vars:
    modules:
      - name: vfio_iommu_type1
  when: edpm_kernel_args is search("iommu")

- name: Reboot block
  when:
    - reboot_required is defined and reboot_required
    - not edpm_kernel_defer_reboot|bool
    - not _workload_protection|default(false)|bool
  block:
    - name: Reboot tasks
      ansible.builtin.include_tasks: reboot.yaml
      when:
        - grub_file_entry_check is not changed

    - name: Skipping reboot for deployed node
      ansible.builtin.debug:
        msg: "Reboot is skipped for kernel arg change, user has to plan the reboot with migration and downtime"
      when:
        - grub_file_entry_check is changed
