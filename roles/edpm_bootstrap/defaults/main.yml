---
# Copyright 2019 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# All variables intended for modification should be placed in this file.


# seconds between retries for download tasks
edpm_bootstrap_download_delay: 5

# number of retries for download tasks
edpm_bootstrap_download_retries: 5

# List of packages that are requred to bootstrap EDPM.
edpm_bootstrap_packages_bootstrap:
  - driverctl
  - lvm2
  - crudini
  - jq
  - nftables
  - NetworkManager
  - openstack-selinux
  - python3-libselinux
  - python3-pyyaml
  - rsync
  - tmpwatch
  - sysstat
  - iproute-tc
  - ksmtuned
  # This is required for correct management of cgroups applied to qemu
  # instances without this libvirt falls back to a legacy cgroup
  # codepath that is no-longer tested or supported in rhel as of rhel 8...
  - systemd-container
  - crypto-policies-scripts
  - grubby

edpm_bootstrap_release_version_package:
  - rhoso-release

# List of packages that are required for legacy networking to function.
# NOTE: We are using 'network' service provided by 'network-scripts' (initscripts)
#       which deprecated in recent releases but os-net-config doesn't support yet
#       NetworkManager. Until it happens, we need to ensure that network is started
#       at boot, as it'll take care of restarting the network interfaces managed by
#       OVS. Note that OVS unit service is already configure to start before
#       network.service.
edpm_bootstrap_legacy_network_packages:
  - openstack-network-scripts
edpm_bootstrap_network_service: NetworkManager

# Control resolv.conf management by NetworkManager
# false = disable NetworkManager resolv.conf update (default)
# true = enable NetworkManager resolv.conf update
edpm_bootstrap_network_resolvconf_update: false

# String for SELinux state. One of: disabled, enforcing, permissive
edpm_bootstrap_selinux_mode: enforcing

# Swap management
edpm_bootstrap_swap_size_megabytes: 1024
edpm_bootstrap_swap_path: /swap
edpm_bootstrap_swap_partition_enabled: false
edpm_bootstrap_swap_partition_label: swap1

# Shell command that is executed before any packages are installed by the role.
# Can be used to register systems using any arbitrary registration command(s).
edpm_bootstrap_command: ""

# edpm_bootstrap_fips_mode is used to check fips status or enable/disable it
# can take on the following values:
# enabled: Enable FIPS
# disabled: Disable FIPS
# check: Check the FIPS status
# The default is `check` if the top level var `edpm_fips_mode` is not defined
edpm_bootstrap_fips_mode: "{{ edpm_fips_mode | default('check', true) }}"

# Map between `fips-mode-setup --is-enabled` exit status
# and messages, as defined in man page fips-mode-setup(8)
edpm_bootstrap_fips_fms_status:
  - {exit_code: 0, state: 'enabled', message: 'FIPS is enabled'}
  - {exit_code: 1, state: 'inconsistent', message: 'FIPS setup is inconsistent'}
  - {exit_code: 2, state: 'disabled', message: 'FIPS is disabled'}
