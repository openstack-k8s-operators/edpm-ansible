---
# Copyright 2022 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Apply ovsdb configuration from configMaps
  block:
    - name: Check that config file exists
      ansible.builtin.stat:
        path: "{{ edpm_ovn_config_src }}/ovsdb-config"
      register: ovsdb_config_exists
      delegate_to: localhost
      become: false

    - name: Load ovsdb configuration from file
      ansible.builtin.include_vars:
        file: "{{ edpm_ovn_config_src }}/ovsdb-config"
        name: edpm_ovn_configmap_facts
      when:
        ovsdb_config_exists.stat.exists
      delegate_to: localhost
      become: false

    - name: Append ovsdb configMap options to external_ids
      ansible.builtin.set_fact:
        edpm_ovn_ovs_external_ids: "{{ edpm_ovn_ovs_external_ids | combine(edpm_ovn_configmap_facts | default({})) }}"

- name: Configure OVN CMS Options
  block:
    - name: Configure GW ports on chassis setting when enabled
      ansible.builtin.set_fact:
        chassis_options:
          - "enable-chassis-as-gw"
      when: edpm_enable_chassis_gw | default(false)

    - name: Configure external port hosting on chassis setting when enabled
      ansible.builtin.set_fact:
        chassis_options: "{{ chassis_options | default([]) + ['enable-chassis-as-extport-host'] }}"
      when: edpm_enable_chassis_extport | default(false)

    - name: Configure availability zones for chassis if set
      ansible.builtin.set_fact:
        chassis_options: "{{ chassis_options | default([]) + ['availability-zones=' + edpm_ovn_availability_zones | join(':')] }}"
      when: edpm_ovn_availability_zones | length > 0

    - name: Build OVN CMS Options
      ansible.builtin.set_fact:
        ovn_cms_options:
          ovn-cms-options: "{{ chassis_options | join(',') }}"
      when:
        - chassis_options is defined

    - name: Append OVN CMS Options to external_ids
      ansible.builtin.set_fact:
        edpm_ovn_ovs_external_ids: "{{ edpm_ovn_ovs_external_ids | combine(ovn_cms_options | default({})) }}"
      when:
        - ovn_cms_options is defined

- name: Configure hw-offload when required
  when: edpm_enable_hw_offload | default(false)
  block:
    - name: Add hw-offload if enabled
      ansible.builtin.set_fact:
        hw_offload:
          hw-offload: true

    - name: Append other_config with hw-offload
      ansible.builtin.set_fact:
        edpm_ovn_ovs_other_config: "{{ edpm_ovn_ovs_other_config | combine(hw_offload) }}"

- name: Configure OVS external_ids
  ansible.builtin.shell: >
    ovs-vsctl set open . {% for key, value in edpm_ovn_ovs_external_ids.items() -%} external_ids:{{ key }}={{ value }} {% endfor %}
  register: ovs_external_ids
  changed_when: ovs_external_ids.rc == 0
  failed_when: ovs_external_ids.rc != 0
  when: edpm_ovn_ovs_external_ids | length > 0

- name: Configure OVS other_config
  ansible.builtin.shell: >
    ovs-vsctl set open . {% for key, value in edpm_ovn_ovs_other_config.items() %} other_config:{{ key }}={{ value }} {% endfor %}
  register: ovs_other_config
  changed_when: ovs_other_config.rc == 0
  failed_when: ovs_other_config.rc != 0
  when: edpm_ovn_ovs_other_config | length > 0

- name: Add OVS Manager
  block:
    - name: Check if OVS Manager already exists
      ansible.builtin.shell: |
        set -o pipefail
        ovs-vsctl show | grep -q "Manager"
      register: ovs_manager_configured
      changed_when: true
      failed_when: false

    - name: Add OVS Manager if not exists
      ansible.builtin.shell: >
        ovs-vsctl --timeout=5 --id=@manager -- create Manager target=\"ptcp:6640:127.0.0.1\" -- add Open_vSwitch . manager_options @manager
      when: ovs_manager_configured.rc == 1
      register: ovs_manager_if_not_exists
      changed_when: ovs_manager_if_not_exists.rc == 0
      failed_when: ovs_manager_if_not_exists.rc != 0
