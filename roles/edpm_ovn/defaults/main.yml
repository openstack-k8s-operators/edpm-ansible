---
# defaults file for edpm_ovn

# service name this role manages
edpm_ovn_service_name: "ovn"

# seconds between retries for download tasks
edpm_ovn_images_download_delay: 5

# number of retries for download tasks
edpm_ovn_images_download_retries: 5

edpm_ovn_config_src: "/var/lib/openstack/configs/{{ edpm_ovn_service_name }}"
edpm_ovn_bridge: br-int
edpm_ovn_bridge_mappings: ["datacentre:br-ex"]

# Local unicast prefix
edpm_ovn_chassis_mac_first_octets: ["0e", "1e", "2e", "3e"]
# Automatically generate the first two octets for the MAC address pefixes.
# Pick random from first octets and then a nested iteration over a range
# of seeds.
# The inner loop breaks as soon as the bridge_mapping is in seen_bridges.
edpm_ovn_chassis_mac_mapping_prefixes:
  "{%- set mac_prefixes = {} -%}
   {%- set seen_prefixes = [] -%}
   {%- set seen_bridges = [] -%}
   {%- for bridge_mapping in edpm_ovn_bridge_mappings -%}
     {%- for n in range(0,255) if bridge_mapping not in seen_bridges -%}
       {%- set _seed = (bridge_mapping + n|string) -%}
       {%- set prefix = edpm_ovn_chassis_mac_first_octets | random + ':' + '%02x' % 255 | random(seed=_seed) -%}
       {%- if not prefix in seen_prefixes -%}
         {%- set seen_prefixes = seen_prefixes.append(prefix) -%}
         {%- set seen_bridges = seen_bridges.append(bridge_mapping) -%}
         {%- set mac_prefixes = mac_prefixes.update({(bridge_mapping | split(':') | first): prefix}) -%}
       {%- endif -%}
     {%- endfor -%}
   {%- endfor -%}
  {{ mac_prefixes }}"

edpm_ovn_chassis_mac_mapping_seed: "{{ ansible_machine_id }}"
edpm_ovn_encap_type: geneve
edpm_ovn_encap_tos: "0"
edpm_ovn_dbs: []
edpm_enable_chassis_gw: false
edpm_enable_chassis_extport: false
edpm_ovn_availability_zones: []
edpm_enable_hw_offload: false
edpm_ovn_multi_rhel: false
edpm_enable_internal_tls: false
edpm_ovn_sb_server_port: 6642
edpm_ovn_remote_probe_interval: 60000
edpm_ovn_ofctrl_wait_before_clear: 8000
edpm_ovn_controller_agent_image: "quay.io/podified-antelope-centos9/openstack-ovn-controller:current-podified"
edpm_ovn_encap_ip: "{{ tenant_ip }}"
edpm_ovn_protocol: "{% if edpm_enable_internal_tls | bool %}ssl{% else %}tcp{% endif %}"
ovn_match_northd_version: false
ovn_monitor_all: true

edpm_ovn_controller_common_volumes:
  - /lib/modules:/lib/modules:ro
  - /run:/run
  - /var/lib/openvswitch/ovn:/run/ovn:shared,z
  - /var/lib/kolla/config_files/ovn_controller.json:/var/lib/kolla/config_files/config.json:ro

edpm_ovn_controller_tls_cacert_bundle_src: "/var/lib/openstack/cacerts/{{ edpm_ovn_service_name }}/tls-ca-bundle.pem"
edpm_ovn_controller_tls_cacert_bundle_dest: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
edpm_ovn_controller_tls_cacert_volumes: []

edpm_ovn_controller_tls_volumes:
  - "/var/lib/openstack/certs/{{ edpm_ovn_service_name }}/default/ca.crt:/etc/pki/tls/certs/ovndbca.crt:ro,z"
  - "/var/lib/openstack/certs/{{ edpm_ovn_service_name }}/default/tls.crt:/etc/pki/tls/certs/ovndb.crt:ro,z"
  - "/var/lib/openstack/certs/{{ edpm_ovn_service_name }}/default/tls.key:/etc/pki/tls/private/ovndb.key:ro,Z"

edpm_ovn_tls_enabled: "{{ edpm_tls_certs_enabled | default(False) }}"

# Set external_id data from provided variables
edpm_ovn_ovs_external_ids:
  hostname: "{{ canonical_hostname }}"
  ovn-bridge: "{{ edpm_ovn_bridge }}"
  ovn-bridge-mappings: "{{ edpm_ovn_bridge_mappings | join(',') }}"
  ovn-chassis-mac-mappings: >-
    "{%- set chassis_mac_mappings = [] -%}
    {%- for physnet, mac_prefix in edpm_ovn_chassis_mac_mapping_prefixes.items() -%}
    {{ chassis_mac_mappings.append([physnet, mac_prefix | community.general.random_mac(seed=edpm_ovn_chassis_mac_mapping_seed)] |
      join(':')) }}{%- endfor -%}
    {{ chassis_mac_mappings | join(',') }}"
  ovn-encap-ip: "{{ edpm_ovn_encap_ip }}"
  ovn-encap-type: "{{ edpm_ovn_encap_type }}"
  ovn-encap-tos: "{{ edpm_ovn_encap_tos }}"
  ovn-match-northd-version: "{{ ovn_match_northd_version }}"
  ovn-monitor-all: "{{ ovn_monitor_all }}"
  ovn-remote: >-
    "{%- set db_addresses = [] -%}{%- for host in edpm_ovn_dbs -%}
    {{ db_addresses.append([edpm_ovn_protocol, host, edpm_ovn_sb_server_port] | join(':')) }}{%- endfor -%}
    {{ db_addresses | join(',') }}"
  ovn-remote-probe-interval: "{{ edpm_ovn_remote_probe_interval }}"
  ovn-ofctrl-wait-before-clear: "{{ edpm_ovn_ofctrl_wait_before_clear }}"
  rundir: "/var/run/openvswitch"

# Set openvswitch other_config.
edpm_ovn_ovs_other_config: {}

edpm_ovn_healthcheck: true
