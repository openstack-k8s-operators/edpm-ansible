---
# Copyright 2023 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Validate that hostname for the EDPM openstack services do not change
  become: true
  tags:
    - adoption
    - validation
  block:
    - name: Check if old nova.conf exists
      ansible.builtin.stat:
        path: "{{ edpm_pre_adoption_validation_old_nova_config }}"
      register: nova_old_config_file

    # NOTE(gibi): we intentionally using python configparser to extract
    # the config value. Grep is not enough as multiple sections have 'host'
    # key. Also we cannot rely on crudini as it is not available on the
    # node being adopted.
    - name: Compare old nova service host to {{ canonical_hostname }}
      when: nova_old_config_file.stat.exists
      ansible.builtin.command:
        cmd: >
          python3 -c
          "import configparser as c;
          p = c.ConfigParser(strict=False);
          p.read('{{ edpm_pre_adoption_validation_old_nova_config }}');
          print(p['DEFAULT']['host'])"
      register: nova_old_config_output
      changed_when: false
      failed_when: nova_old_config_output.stdout != canonical_hostname

    - name: Check if old neutron.conf exists
      ansible.builtin.stat:
        path: "{{ edpm_pre_adoption_validation_old_neutron_config }}"
      register: neutron_old_config_file

    - name: Compare old neutron service host to {{ canonical_hostname }}
      when: neutron_old_config_file.stat.exists
      ansible.builtin.command:
        cmd: >
          python3 -c
          "import configparser as c;
          p = c.ConfigParser(strict=False);
          p.read('{{ edpm_pre_adoption_validation_old_neutron_config }}');
          print(p['DEFAULT']['host'])"
      register: neutron_old_config_output
      changed_when: false
      failed_when: neutron_old_config_output.stdout != canonical_hostname

    - name: Print validated information
      ansible.builtin.debug:
        msg:
          - "canonical_hostname: {{ canonical_hostname }}"
          - "old nova service host config: {{ nova_old_config_output.stdout | default('not found') }}"
          - "old neutron service host config: {{ neutron_old_config_output.stdout | default('not found') }}"

- name: Check if hostname -f is consistent with the hostname in nova.conf {{ nova_old_config_output.stdout }}
  become: true
  tags:
    - adoption
    - validation
  when: nova_old_config_file.stat.exists
  ansible.builtin.command:
    cmd: /usr/bin/hostname -f
  register: hypervisor_hostname
  changed_when: false
  failed_when: hypervisor_hostname.stdout != nova_old_config_output.stdout
