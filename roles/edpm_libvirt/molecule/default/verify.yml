---
# This is an example playbook to execute Ansible tests.

- name: Verify
  hosts: compute-1
  gather_facts: false
  vars:
    test_helper_dir: "../../../../molecule/test-helpers"
  tasks:
    - name: ensure expected directories exist
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_dir.yaml"
      loop:
        # common directories
        - "/etc/tmpfiles.d/"
        - "/var/lib/openstack"
        # extrenal deps
        - "/var/lib/openstack/config/ceph"
        # libvirt directories
        - "/var/lib/libvirt"
        - "/etc/libvirt"
    - name: ensure firewall is configured
      ansible.builtin.include_tasks: "test-helpers/verify_firewall.yaml"
    - name: ensure systemd services are defined and functional
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_systemd_unit.yaml"
      loop:
        # rhel installed services have service units defiend via rpm in
        # /usr/lib/systemd/system so disable the check for them them in
        # /etc/systemd/system
        - { "name": "virtlogd.service", "osp_service": false, "enabled": "enabled" }
        - { "name": "virtnodedevd.service" , "osp_service": false, "enabled": "enabled", "active": ["active", "inactive"] }
        - { "name": "virtproxyd.service", "osp_service": false, "enabled": "enabled", "active": ["active", "inactive"] }
        - { "name": "virtqemud.service", "osp_service": false, "enabled": "enabled", "active": ["active", "inactive"] }
        - { "name": "virtsecretd.service", "osp_service": false, "enabled": "enabled", "active": ["active", "inactive"] }
        - { "name": "libvirtd.service", "osp_service": false, "enabled": "masked", "active": ["inactive"] }
        - { "name": "libvirtd-tcp.socket", "osp_service": false, "enabled": "masked", "active": ["inactive"] }
        - { "name": "libvirtd-tls.socket", "osp_service": false, "enabled": "masked", "active": ["inactive"] }
        - { "name": "virtproxyd-tcp.socket", "osp_service": false, "enabled": "masked", "active": ["inactive"] }

    - name: ensure libvirt.target exist and are running
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_systemd_unit.yaml"
      loop:
        - { "name": "edpm_libvirt.target", "enabled": "static"}
        - { "name": "edpm_libvirt_guests.service", "running":false }
        - { "name": "virt-guest-shutdown.target", "enabled": "static", "running":false }
    - name: Check if user exists
      ansible.builtin.getent:
        database: passwd
        key: libvirt
      register: libvirt_user

    - name: validate tls with virt-pki-validate
      become: true
      ansible.builtin.shell: "virt-pki-validate"
      register: virt_pki_validate
    - name: Assert that virt-pki-validate returns no errors
      assert:
        that:
          - "virt_pki_validate.rc == 0"
    - name: ensure we can connect to libvirt with virsh via tls
      # Note we need become because the client cert is owned by root
      become: true
      ansible.builtin.command: "virsh -c qemu+tls://{{ inventory_hostname }}/system version"
      register: virsh_tls
      failed_when: virsh_tls.rc != 0
    - name: Assert that libvirt user is created with kolla uid and gid
      ansible.builtin.assert:
        that:
          # user
          - "libvirt_user.ansible_facts.getent_passwd.libvirt[1] == '42473'"
          # group
          - "libvirt_user.ansible_facts.getent_passwd.libvirt[2] == '42473'"
    - name: ensure libvirt sockets are enabled
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_systemd_unit.yaml"
      loop:
        - { "name": "virtlogd-admin.socket", "osp_service": false }
        - { "name": "virtlogd.socket", "osp_service": false }
        - { "name": "virtnodedevd-admin.socket", "osp_service": false }
        - { "name": "virtnodedevd-ro.socket", "osp_service": false }
        - { "name": "virtnodedevd.socket", "osp_service": false }
        - { "name": "virtproxyd-admin.socket", "osp_service": false }
        - { "name": "virtproxyd-ro.socket", "osp_service": false }
        - { "name": "virtproxyd.socket", "osp_service": false }
        - { "name": "virtqemud-admin.socket", "osp_service": false }
        - { "name": "virtqemud-ro.socket", "osp_service": false }
        - { "name": "virtqemud.socket", "osp_service": false }
        - { "name": "virtsecretd-admin.socket", "osp_service": false }
        - { "name": "virtsecretd-ro.socket", "osp_service": false }
        - { "name": "virtsecretd.socket", "osp_service": false }

    - name: ensure libvirt socket activation drop-in directories exist
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_sockets_exits.yaml"
      loop:
        - {"path": "/run/libvirt/virtlogd-admin-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtlogd-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtnodedevd-admin-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtnodedevd-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtnodedevd-sock-ro", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtqemud-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtqemud-sock-ro", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtqemud-admin-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtsecretd-admin-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtsecretd-sock", "user": "root", "group": "libvirt" }
        - {"path": "/run/libvirt/virtsecretd-sock-ro", "user": "root", "group": "libvirt" }

    - name: ensure container_file_t selinux lable is not set on /run/libvirt
      ansible.builtin.shell: "ls -lZ /run/libvirt | grep container_file_t"
      register: run_libvirt
      failed_when: run_libvirt.rc not in [0, 1]
    - name: Assert that container_file_t selinux lable is not set on /run/libvirt
      ansible.builtin.assert:
        that:
          - "run_libvirt.rc != 0"

    - name: Load /etc/libvirt/qemu.conf
      become: true
      ansible.builtin.slurp:
        src: /etc/libvirt/qemu.conf
      register: qemu_conf
    - name: Assert that qemu.conf has a proper migration port range
      assert:
        that:
          - "'migration_port_min = 61152' in qemu_conf.content | b64decode"
          - "'migration_port_max = 61215' in qemu_conf.content | b64decode"
    - name: Assert that nbt_tls is disabled in qemu.conf
      assert:
        that:
          - "'nbd_tls = 0' in qemu_conf.content | b64decode"

    - name: Load os_enabled_vtpm selinux boolean
      ansible.builtin.shell: "getsebool os_enable_vtpm"
      register: os_enabled_vtpm
    - name: Assert that os_enabled_vtpm selinux boolean is enabled
      assert:
        that:
          - "os_enabled_vtpm.stdout_lines[0] == 'os_enable_vtpm --> on'"

    - name: ensure ceph secret is configured
      ansible.builtin.include_tasks: "test-helpers/verify_ceph_secret.yaml"

    - name: Load /etc/libvirt/auth.conf
      become: true
      ansible.builtin.slurp:
        src: /etc/libvirt/auth.conf
      register: libvirt_auth_conf
    - name: Assert that libvirt auth password is set
      assert:
        that:
          - "'password=correct horse battery staple' in libvirt_auth_conf.content | b64decode | split('\n')"

    - name: Get sasl users
      become: true
      ansible.builtin.command:
        cmd: sasldblistusers2 -f /etc/libvirt/passwd.db
      register: saslusers
    - name: Assert that libvirt sasl user exists
      assert:
        that:
          - "'migration@openstack: userPassword' in saslusers.stdout_lines"

    - name: Load /etc/libvirt/virtproxyd.conf
      become: true
      ansible.builtin.slurp:
        src: /etc/libvirt/virtproxyd.conf
      register: virtproxyd_conf
    - name: Assert that sasl auth is configured
      assert:
        that:
          - "'auth_tls=\"sasl\"' in virtproxyd_conf.content | b64decode | split('\n')"
