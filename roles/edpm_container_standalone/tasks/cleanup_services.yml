---
# Copyright 2025 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Check if state file exists
  ansible.builtin.stat:
    path: "{{ edpm_container_standalone_state_file }}"
  register: _edpm_cleanup_state_file_stat

- name: Fail if state file doesn't exist
  ansible.builtin.fail:
    msg: "State file {{ edpm_container_standalone_state_file }} not found. Cannot proceed with cleanup."
  when: not _edpm_cleanup_state_file_stat.stat.exists

- name: Read state file
  ansible.builtin.slurp:
    path: "{{ edpm_container_standalone_state_file }}"
  register: _edpm_cleanup_state_content

- name: Parse state file
  ansible.builtin.set_fact:
    _edpm_cleanup_state_data: "{{ _edpm_cleanup_state_content.content | b64decode | from_yaml }}"

- name: Cleanup each service
  ansible.builtin.include_tasks: cleanup_single_service.yml
  loop: "{{ edpm_services_to_cleanup }}"
  loop_control:
    loop_var: _edpm_cleanup_service_name
  when:
    - _edpm_cleanup_service_name in _edpm_cleanup_state_data.services.keys()

- name: Remove services from state file
  osp.edpm.edpm_service_state:
    state_file: "{{ edpm_container_standalone_state_file }}"
    service_name: "{{ item }}"
    state: absent
  loop: "{{ edpm_services_to_cleanup }}"
  when:
    - item in _edpm_cleanup_state_data.services.keys()

- name: Cleanup orphaned containers
  when: edpm_cleanup_orphaned_containers | bool
  block:
    - name: Get all edpm_ansible managed containers
      become: true
      containers.podman.podman_container_info:
      register: _edpm_all_containers

    - name: Build list of tracked container names
      ansible.builtin.set_fact:
        _edpm_tracked_containers: >-
          {{
            _edpm_cleanup_state_data.services.values() |
            map(attribute='containers') |
            flatten |
            list
          }}

    - name: Build list of managed containers
      ansible.builtin.set_fact:
        _edpm_all_managed_containers: []

    - name: Filter managed containers
      ansible.builtin.set_fact:
        _edpm_all_managed_containers: "{{ _edpm_all_managed_containers + [item.Name] }}"
      loop: "{{ _edpm_all_containers.containers | default([]) }}"
      when:
        - item['Config'] is defined
        - item['Config']['Labels'] is defined
        - item['Config']['Labels']['managed_by'] is defined
        - item['Config']['Labels']['managed_by'] == 'edpm_ansible'

    - name: Identify orphaned containers
      ansible.builtin.set_fact:
        _edpm_orphaned_containers: "{{ _edpm_all_managed_containers | difference(_edpm_tracked_containers) }}"

    - name: Log orphaned containers
      ansible.builtin.debug:
        msg: "Found {{ _edpm_orphaned_containers | length }} orphaned containers: {{ _edpm_orphaned_containers }}"

    - name: Remove orphaned containers
      ansible.builtin.include_role:
        name: edpm_container_rm
      vars:
        edpm_containers_to_rm: ["{{ _edpm_orphaned_container }}"]
      loop: "{{ _edpm_orphaned_containers }}"
      loop_control:
        loop_var: _edpm_orphaned_container
      when: _edpm_orphaned_containers | length > 0
